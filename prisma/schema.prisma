// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  rooms         Room[]    @relation(fields: [roomIds], references: [id])
  roomIds       String[]  @db.ObjectId
  messages      Message[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  status        String    @default("offline")
}

model Room {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String?
  isGroup     Boolean   @default(false)
  users       User[]    @relation(fields: [userIds], references: [id])
  userIds     String[]  @db.ObjectId
  messages    Message[]
  lastMessage Message?  @relation("LastMessage", fields: [lastMessageId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  lastMessageId String? @unique @db.ObjectId
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  fileUrl   String?
  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId    String   @db.ObjectId
  sender    User     @relation(fields: [senderId], references: [id], onDelete: Cascade)
  senderId  String   @db.ObjectId
  lastMessageRoom Room?    @relation("LastMessage")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  seenIds   String[] @db.ObjectId
}